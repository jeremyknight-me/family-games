@page "/tic-tac-toe" 
@using FamilyGames.Web.Games.TicTacToe

<h3>Tic-Tac-Toe</h3>

@if (board is null || board.Cells is null || board.Cells.Length == 0)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col">
            <span class="fw-bold">Current Turn:</span>
            <span>@($"Player {board.CurrentPlayerTurn}")</span>
        </div>
        <div class="col text-end">
            <button type="button" class="btn btn-primary" @onclick="this.Reset">Reset</button>
        </div>
    </div>

    @if (this.board.HasDraw)
    {
        <div class="alert alert-warning" role="alert">
            Game has ended in a draw. Reset to play again.
        </div>
    }

    <div class="text-center">
        <div class="row">
            @for (int i = 0; i < this.board.Cells.Length; i++)
            {
                var cell = this.board.Cells[i];
                <div class="col-4" data-id="@i">
                    <button type="button"
                            class="btn btn-light @(cell.IsWinner ? "text-success" : string.Empty)"
                    @onclick="() => SendMove(cell.Index)"
                            disabled="@this.board.HasConcluded">
                        <i style="font-size: 8em;" class="bi @(this.GetIcon(cell.Index))"></i>
                    </button>
                </div>
            }
        </div>
    </div>
}

@code {
    private Board board = Board.Create();

    private string GetIcon(int index)
        => this.board.Cells[index].Owner switch
        {
            Player.X => "bi-x-lg",
            Player.O => "bi-circle",
            _ => "bi-square"
        };

    private void SendMove(int index)
    {
        var request = new PlayerMove
            {
                Player = board.CurrentPlayerTurn,
                Slot = index
            };
        this.board.Move(request);
    }

    private void Reset()
    {
        this.board = Board.Create();
    }
}
